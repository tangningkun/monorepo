{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Base",
  "compilerOptions": {
    //↓是否编译构建引用项目
    "composite": false,
    // ↓用来指定是否在编译的时候生成相的d.ts声明文件，如果设为true,编译每个ts文件之后会生成一个js文件和一个声明文件，但是declaration和allowJs不能同时设为true
    "declaration": true,
    // ↓用来指定编译时是否生成.map文件
    "declarationMap": true,
    // ↓通过导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
    "esModuleInterop": true,
    // ↓在 .tsx文件里支持JSX
    "jsx": "preserve",
    // ↓允许编译javascript文件。
    "allowJs": true,
    // ↓禁用函数参数双向协变检查。
    "strictFunctionTypes": false,
    // ↓允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // ↓禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // ↓用于指定是否进一步将ts文件的内容也包含到输出文件中
    "inlineSources": false,
    // ↓指定是否必须导出一个空模块
    "isolatedModules": false,
    // ↓决定如何处理模块。
    "moduleResolution": "node",
    // ↓若有未使用的局部变量则抛错。
    "noUnusedLocals": true,
    // ↓若有未使用的参数则抛错。
    "noUnusedParameters": true,
    // ↓是否在监视模式下保留过时的控制台输出,而不是每次发生更改时都清除屏幕,默认:false
    "preserveWatchOutput": true,
    // ↓忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true,
    // ↓启用所有严格类型检查选项。
    "strict": true,
    // ↓是否解析 JSON 模块
    "resolveJsonModule": true,
    // ↓指定ECMAScript目标版本，esnext为最新版本
    "removeComments": true,
    // ↓在表达式和声明上有隐含的 any类型时报错。
    "noImplicitAny": false,
    // ↓启用实验性的ES装饰器。
    "experimentalDecorators": true,
    // ↓用于指定编译之后的版本目录
    "target": "esnext",
    // ↓指定生成哪个模块系统代码，esnext为最新版本
    "module": "esnext",
    // ↓是否包含默认库文件
    "noLib": false,
    // ↓解析非相对模块名的基准目录。查看 模块解析文档了解详情。
    "baseUrl": ".",
    // ↓生成相应的 .map文件。
    "sourceMap": true,
    // ↓编译过程中需要引入的库文件的列表。
    "lib": [
      "dom",
      "esnext"
    ],
    // ↓要包含的类型声明文件名列表。
    "types": [
      "node",
      "vite/client"
    ]
  },
  // 指定一个排除列表（include的反向操作）
  "exclude": [
    "**/node_modules/**",
    "**/dist/**"
  ]
}